var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.PushKitEventHandlers=exports.CallKeepEventHandlers=void 0;exports.handleIncomingVideoCallEndedRemotely=handleIncomingVideoCallEndedRemotely;exports.handleIncomingVideoCallNotification=handleIncomingVideoCallNotification;exports.handleVideoCallEndedNotification=handleVideoCallEndedNotification;exports.navigateOnAnswerCall=navigateOnAnswerCall;exports.navigateOnEndCall=navigateOnEndCall;var _classCallCheck2=_interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2=_interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _reactNative=require("react-native");var _video=_interopRequireDefault(require("../api/video"));var _callkeep=_interopRequireDefault(require("../callkeep"));var connectionManager=_interopRequireWildcard(require("./connectionManager"));var activeCallManager=_interopRequireWildcard(require("./activeCallManager"));var _HDConfig=_interopRequireDefault(require("../HDConfig"));function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!=="function")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!=="default"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function navigateOnAnswerCall(consultationID,videoRoomSID,accessToken){_HDConfig.default.onAnswerCall(consultationID,videoRoomSID,accessToken);}function navigateOnEndCall(consultationID,videoRoomSID){_HDConfig.default.onEndCall(consultationID,videoRoomSID);}function handleIncomingVideoCallNotification(_x,_x2,_x3){return _handleIncomingVideoCallNotification.apply(this,arguments);}function _handleIncomingVideoCallNotification(){_handleIncomingVideoCallNotification=(0,_asyncToGenerator2.default)(function*(videoRoomSID,callerDisplayName,callerPhotoURL){yield connectionManager.registerIncomingVideoCall(null,videoRoomSID,null,{displayName:callerDisplayName});return activeCallManager.displayIncomingCallNotification(videoRoomSID,callerDisplayName,callerPhotoURL);});return _handleIncomingVideoCallNotification.apply(this,arguments);}function handleIncomingVideoCallEndedRemotely(_x4){return _handleIncomingVideoCallEndedRemotely.apply(this,arguments);}function _handleIncomingVideoCallEndedRemotely(){_handleIncomingVideoCallEndedRemotely=(0,_asyncToGenerator2.default)(function*(videoRoomSID){var call=connectionManager.getIncomingCall();if(!call){console.warn("no call found for room "+videoRoomSID);return;}_callkeep.default.reportEndCallWithUUID(call.uuid,2);yield(0,connectionManager.endVideoCall)(videoRoomSID);(0,connectionManager.tryCancelVideoCallNotification)(videoRoomSID);});return _handleIncomingVideoCallEndedRemotely.apply(this,arguments);}function handleVideoCallEndedNotification(_x5){return _handleVideoCallEndedNotification.apply(this,arguments);}function _handleVideoCallEndedNotification(){_handleVideoCallEndedNotification=(0,_asyncToGenerator2.default)(function*(videoRoomSID){(0,connectionManager.tryCancelVideoCallNotification)(videoRoomSID);var call=connectionManager.getIncomingCall();if(!call){_callkeep.default.endAllCalls();throw new Error("unknown_call");}if(call.status==="incoming"){throw new Error("missed_call");}if(_reactNative.Platform.OS==="ios"){_callkeep.default.reportEndCallWithUUID(call.uuid,2);yield(0,connectionManager.endVideoCall)(videoRoomSID);}});return _handleVideoCallEndedNotification.apply(this,arguments);}var appStateChangeSubscription;function doAnswerCall(_x6){return _doAnswerCall.apply(this,arguments);}function _doAnswerCall(){_doAnswerCall=(0,_asyncToGenerator2.default)(function*(callUUID){var call=connectionManager.getCallByUUID(callUUID);if(!call){console.warn("cannot answer call: no call found with uuid "+callUUID);return;}else if(call.status==="answering"){console.info("already answering call "+callUUID);return;}console.debug("[doAnswerCall]",{callUUID:callUUID,call:call});call.status="answering";_callkeep.default.answerIncomingCall(call.uuid);var consultationID=call.consultationID,videoRoomSID=call.videoRoomSID;var response=yield _video.default.requestVideoCallAccess(videoRoomSID);var accessToken=response.accessToken;var navigateOnActive=function(){var _ref=(0,_asyncToGenerator2.default)(function*(nextAppState){var _appStateChangeSubscr;if(nextAppState!=="active"){return;}navigateOnAnswerCall(consultationID,videoRoomSID,accessToken);(_appStateChangeSubscr=appStateChangeSubscription)==null?void 0:_appStateChangeSubscr.remove();appStateChangeSubscription=undefined;});return function navigateOnActive(_x10){return _ref.apply(this,arguments);};}();if(_reactNative.AppState.currentState==="active"){navigateOnAnswerCall(consultationID,videoRoomSID,accessToken);}else{appStateChangeSubscription=_reactNative.AppState.addEventListener("change",navigateOnActive);}});return _doAnswerCall.apply(this,arguments);}var CallKeepEventHandlers=function(){function CallKeepEventHandlers(){(0,_classCallCheck2.default)(this,CallKeepEventHandlers);}(0,_createClass2.default)(CallKeepEventHandlers,null,[{key:"handleAnswerCall",value:function(){var _handleAnswerCall=(0,_asyncToGenerator2.default)(function*(event){console.debug("[CallKeepEventHandlers:handleAnswerCall]",{callUUID:event.callUUID});yield doAnswerCall(event.callUUID);});function handleAnswerCall(_x7){return _handleAnswerCall.apply(this,arguments);}return handleAnswerCall;}()},{key:"handleDidPerformSetMutedCallAction",value:function handleDidPerformSetMutedCallAction(event){var call=connectionManager.getCallByUUID(event.callUUID);if(!call){console.warn("cannot handle set muted call: no call found with uuid "+event.callUUID);return;}activeCallManager.setLocalAudioEnabled(event.muted).catch(function(error){return console.warn("error muting call: "+error);}).then(function(){return call.isCallMuted=event.muted;});}},{key:"handleDidToggleHoldCallAction",value:function handleDidToggleHoldCallAction(event){var call=connectionManager.getCallByUUID(event.callUUID);if(!call){console.warn("cannot handle toggle hold: no call found with uuid "+event.callUUID);return;}activeCallManager.setLocalVideoEnabled(!event.hold).catch(function(error){return console.warn("error holding call: "+error);}).then(function(){return call.isCallHeld=event.hold;});}},{key:"handleEndCall",value:function(){var _handleEndCall=(0,_asyncToGenerator2.default)(function*(event){console.debug("[CallKeepEventHandlers:handleEndCall]",{callUUID:event.callUUID});var call=connectionManager.getCallByUUID(event.callUUID);if(!call){console.info("cannot end call: no call found with uuid "+event.callUUID+", but this may have already been handled");return;}if(call.status==="in-progress"){yield connectionManager.endVideoCall(call.videoRoomSID);}else if(call.status==="incoming"){yield connectionManager.rejectVideoCall(call.videoRoomSID);}});function handleEndCall(_x8){return _handleEndCall.apply(this,arguments);}return handleEndCall;}()},{key:"handleDidLoadWithEvents",value:function(){var _handleDidLoadWithEvents=(0,_asyncToGenerator2.default)(function*(events){var answeredCallAction=events.find(function(event){return event.name==="RNCallKeepPerformAnswerCallAction";});if(!answeredCallAction){return;}var answeredCallUUID=answeredCallAction.data.callUUID;var registeredCall=connectionManager.getCallByUUID(answeredCallUUID);if(registeredCall&&registeredCall.status!=="incoming"){return;}var incomingPushKitVideoCallEvent=events.find(function(event){return event.name==="incomingPushKitVideoCall";});var canAnswerCall=(registeredCall==null?void 0:registeredCall.status)==="incoming";if(canAnswerCall){yield doAnswerCall(registeredCall.uuid);}else if(incomingPushKitVideoCallEvent){var incomingCall=incomingPushKitVideoCallEvent.data;yield connectionManager.registerPushKitCall(incomingCall);yield doAnswerCall(incomingCall.uuid);}});function handleDidLoadWithEvents(_x9){return _handleDidLoadWithEvents.apply(this,arguments);}return handleDidLoadWithEvents;}()}]);return CallKeepEventHandlers;}();exports.CallKeepEventHandlers=CallKeepEventHandlers;var answerablePushKitCallUUID;var PushKitEventHandlers=function(){function PushKitEventHandlers(){(0,_classCallCheck2.default)(this,PushKitEventHandlers);}(0,_createClass2.default)(PushKitEventHandlers,null,[{key:"handleOnRegister",value:function handleOnRegister(token){console.info("[PushKitEventHandlers:handleOnRegister]",token);_HDConfig.default.ios.onRegisterPushKitToken(token);}},{key:"handleOnNotification",value:function handleOnNotification(notification){console.info("[PushKitEventHandlers:handleOnNotification]",notification);connectionManager.registerPushKitCall(notification).catch(function(error){return console.warn("[PushKitEventHandlers:handleOnNotification:registerPushKitCall]",error);});}},{key:"handleOnDidLoadWithEvents",value:function handleOnDidLoadWithEvents(events){console.debug("[PushKitEventHandlers:handleOnDidLoadWithEvents]");events.forEach(function(event){return console.debug("[PushKitEventHandlers:handleOnDidLoadWithEvents:EVENT]",event);});var incomingCallNotificationEvent=events.find(function(e){var _e$data;return!!((_e$data=e.data)!=null&&_e$data.videoRoomSID);});if(!incomingCallNotificationEvent){return;}var incomingCallData=incomingCallNotificationEvent.data;var uuid=incomingCallNotificationEvent.data.uuid;var existingIncomingCall=connectionManager.getCallByUUID(uuid);if(existingIncomingCall){return;}connectionManager.registerPushKitCall(incomingCallData).catch(console.warn);if(answerablePushKitCallUUID===uuid){doAnswerCall(uuid).catch(function(error){return console.warn("[PushKitEventHandlers:handleOnDidLoadWithEvents:doAnswerCall]",error);}).finally(function(){return answerablePushKitCallUUID="";});}}}]);return PushKitEventHandlers;}();exports.PushKitEventHandlers=PushKitEventHandlers;