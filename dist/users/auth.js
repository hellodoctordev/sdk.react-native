var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.refreshAccessToken=refreshAccessToken;exports.signIn=signIn;exports.signInWithJWT=signInWithJWT;exports.signOut=signOut;var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _reactNative=require("react-native");var _users=_interopRequireDefault(require("../api/users"));var _currentUser=require("./currentUser");var RNHelloDoctorModule=_reactNative.NativeModules.RNHelloDoctorModule;function signIn(_x,_x2){return _signIn.apply(this,arguments);}function _signIn(){_signIn=(0,_asyncToGenerator2.default)(function*(userID,serverAuthToken){var authenticationResponse=yield _users.default.authenticateUser(userID,serverAuthToken);var currentUser=(0,_currentUser.getCurrentUser)();currentUser.jwt=authenticationResponse.bearerToken;currentUser.uid=userID;currentUser.isThirdParty=true;currentUser.refreshToken=authenticationResponse.refreshToken;yield RNHelloDoctorModule.signIn(userID,serverAuthToken);return currentUser;});return _signIn.apply(this,arguments);}function signInWithJWT(_x3,_x4){return _signInWithJWT.apply(this,arguments);}function _signInWithJWT(){_signInWithJWT=(0,_asyncToGenerator2.default)(function*(userID,jwt){var currentUser=(0,_currentUser.getCurrentUser)();currentUser.jwt=jwt;currentUser.uid=userID;currentUser.isThirdParty=false;yield RNHelloDoctorModule.signInWithJWT(userID,jwt);return currentUser;});return _signInWithJWT.apply(this,arguments);}function signOut(){var currentUser=(0,_currentUser.getCurrentUser)();currentUser.uid="";currentUser.jwt=undefined;currentUser.refreshToken=undefined;}function refreshAccessToken(){return _refreshAccessToken.apply(this,arguments);}function _refreshAccessToken(){_refreshAccessToken=(0,_asyncToGenerator2.default)(function*(){var currentUser=(0,_currentUser.getCurrentUser)();if(!(currentUser!=null&&currentUser.isThirdParty)){return;}if(currentUser===null||currentUser.refreshToken===null){throw new Error('[refreshAccessToken] cannot refresh access token: no user and/or refresh token available');}var authenticationResponse=yield _users.default.authenticateUser(currentUser.uid,currentUser.refreshToken);currentUser.jwt=authenticationResponse.jwt;currentUser.refreshToken=authenticationResponse.refreshToken;});return _refreshAccessToken.apply(this,arguments);}