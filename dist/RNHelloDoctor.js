var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _classCallCheck2=_interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2=_interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _reactNative=require("react-native");var _http=_interopRequireDefault(require("./api/http"));var _consultations=_interopRequireDefault(require("./api/consultations"));var _scheduling=_interopRequireDefault(require("./api/scheduling"));var _users=_interopRequireDefault(require("./api/users"));var _video=_interopRequireDefault(require("./api/video"));var connectionManager=_interopRequireWildcard(require("./telecom/connectionManager"));var connectionService=_interopRequireWildcard(require("./telecom/connectionService"));var eventHandlers=_interopRequireWildcard(require("./telecom/eventHandlers"));var auth=_interopRequireWildcard(require("./users/auth"));var _currentUser=require("./users/currentUser");var _HDConfig=_interopRequireDefault(require("./HDConfig"));function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!=="function")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!=="default"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}var RNHelloDoctorModule=_reactNative.NativeModules.RNHelloDoctorModule;var RNHelloDoctor=function(){function RNHelloDoctor(){(0,_classCallCheck2.default)(this,RNHelloDoctor);}(0,_createClass2.default)(RNHelloDoctor,null,[{key:"configure",value:function(){var _configure=(0,_asyncToGenerator2.default)(function*(config){RNHelloDoctor.appName=config.appName;Object.assign(_HDConfig.default,config);_http.default.API_KEY=config.apiKey;switch(_reactNative.Platform.OS){case"android":yield RNHelloDoctorModule.configure(config.apiKey,config.serviceHost);break;case"ios":yield RNHelloDoctorModule.getAPNSToken().then(_HDConfig.default.ios.onRegisterPushKitToken);break;}console.debug("[RNHelloDoctor.configure:DONE]");return;});function configure(_x){return _configure.apply(this,arguments);}return configure;}()},{key:"signIn",value:function(){var _signIn=(0,_asyncToGenerator2.default)(function*(userID,serverAuthToken){yield auth.signIn(userID,serverAuthToken);if(_reactNative.Platform.OS==="ios"){connectionService.bootstrap();}});function signIn(_x2,_x3){return _signIn.apply(this,arguments);}return signIn;}()},{key:"signInWithJWT",value:function(){var _signInWithJWT=(0,_asyncToGenerator2.default)(function*(userID,jwt){yield auth.signInWithJWT(userID,jwt);if(_reactNative.Platform.OS==="ios"){connectionService.bootstrap();}});function signInWithJWT(_x4,_x5){return _signInWithJWT.apply(this,arguments);}return signInWithJWT;}()},{key:"teardown",value:function teardown(){connectionService.teardown();}},{key:"getCurrentUser",value:function getCurrentUser(){return(0,_currentUser.getCurrentUser)();}},{key:"createUser",value:function createUser(accountPayload){return _users.default.createUser(accountPayload);}},{key:"deleteUser",value:function deleteUser(userID){return _users.default.deleteUser(userID);}},{key:"getAvailability",value:function getAvailability(requestMode,specialty,fromTime,toTime){return _scheduling.default.getAvailability(requestMode,specialty,fromTime,toTime);}},{key:"requestConsultation",value:function requestConsultation(requestMode,specialty,startTime,reason){return _scheduling.default.requestConsultation(requestMode,specialty,startTime,reason);}},{key:"getConsultations",value:function getConsultations(limit){return _consultations.default.getUserConsultations(limit);}},{key:"handleIncomingVideoCallNotification",value:function handleIncomingVideoCallNotification(videoCallPayload){var videoRoomSID=videoCallPayload.videoRoomSID,callerDisplayName=videoCallPayload.callerDisplayName,callerPhotoURL=videoCallPayload.callerPhotoURL;return eventHandlers.handleIncomingVideoCallNotification(videoRoomSID,callerDisplayName,callerPhotoURL);}},{key:"handleIncomingVideoCallNotificationRejected",value:function handleIncomingVideoCallNotificationRejected(){var incomingCall=connectionManager.getIncomingCall();if(!incomingCall){return;}connectionManager.rejectVideoCall(incomingCall.videoRoomSID).catch(console.warn);}},{key:"handleIncomingVideoCallEndedRemotely",value:function handleIncomingVideoCallEndedRemotely(videoRoomSID){return eventHandlers.handleIncomingVideoCallEndedRemotely(videoRoomSID);}},{key:"handleVideoCallEndedNotification",value:function handleVideoCallEndedNotification(videoRoomSID){return eventHandlers.handleVideoCallEndedNotification(videoRoomSID);}},{key:"startVideoCall",value:function startVideoCall(videoRoomSID){connectionManager.handleIncomingVideoCallStarted(videoRoomSID);}},{key:"endVideoCall",value:function endVideoCall(videoRoomSID){return connectionManager.endVideoCall(videoRoomSID);}},{key:"getVideoCallAccessToken",value:function getVideoCallAccessToken(videoRoomSID){return _video.default.requestVideoCallAccess(videoRoomSID).then(function(response){return response.accessToken;});}}]);return RNHelloDoctor;}();exports.default=RNHelloDoctor;